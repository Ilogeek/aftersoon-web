 
 <!DOCTYPE html>
 <html>
 <head>
 <meta name="viewport" content="initial-scale=1.0, user-scalable=no"/>
 <meta http-equiv="content-type" content="text/html; charset=UTF-8"/>
 <title>Aftersoon</title>
 <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false&libraries=places"></script>
 <script type ="text/javascript" src="http://geocodezip.com/scripts/v3_epoly.js"></script>
 <script type="text/javascript">

 var JSONresult = {};

 // GET URL PARAMETERS
     function gup( name )
     {
       name = name.replace(/[\[]/,"\\\[").replace(/[\]]/,"\\\]");
       var regexS = "[\\?&]"+name+"=([^&#]*)";
       var regex = new RegExp( regexS );
       var results = regex.exec( window.location.href );
       if( results == null )
         return null;
       else
         return results[1];
     }
 // END GET URL PARAMETERS

 // HTMLENTITIES FOR JS
	 function htmlEntities(str) {
	     return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
	 }
 // END HTMLENTITIES FOR JS

	 var firstAddress = gup('firstAddress');
	 var secondAddress = gup('secondAddress');
	 var travelModeParam = gup('travelModeParam');
	 var typeOfPlaces = gup('typeOfPlaces'); // https://developers.google.com/places/documentation/supported_types
	 var radius = gup('radius');
	 if (!radius) {radius = 200;}
	 
	 var openNow = gup('openNow');
	 if(!openNow) {openNow = 'no';}
	 
	 var rankBy = gup('rankBy');
	 if(!rankBy) {rankBy = 'PROMINENCE';} else { rankBy = 'DISTANCE';}

   var directionDisplay;
   var directionsService = new google.maps.DirectionsService();
   var map;
   var polyline = null;
   var infowindow = new google.maps.InfoWindow();


   function initialize() {
     directionsDisplay = new google.maps.DirectionsRenderer({suppressMarkers:true});
     var scherwillerFTW = new google.maps.LatLng(48.292681, 7.4149805);
     var myOptions = {
       zoom: 6,
       mapTypeId: google.maps.MapTypeId.ROADMAP,
       center: scherwillerFTW
     }
     map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);
     polyline = new google.maps.Polyline({
     path: [],
     strokeColor: '#FF0000',
     strokeWeight: 3
     });
     directionsDisplay.setMap(map);
     calcRoute();
   }
   
   function calcRoute() {
     var CoordFirstAddress = firstAddress.split(",%20");
     var CoordSecondAddress = secondAddress.split(",%20");
     
     JSONresult.firstCoordinates = new google.maps.LatLng(parseFloat(CoordFirstAddress[0]),parseFloat(CoordFirstAddress[1]));
     JSONresult.secondCoordinates = new google.maps.LatLng(parseFloat(CoordSecondAddress[0]),parseFloat(CoordSecondAddress[1]));

     var start = JSONresult.firstCoordinates;
     var end = JSONresult.secondCoordinates;

     
     var travelMode = google.maps.DirectionsTravelMode.DRIVING;
     if (travelModeParam == "WALKING") {
         travelMode = google.maps.DirectionsTravelMode.WALKING;
     }
     if(travelModeParam == "TRANSIT") {
         travelMode = google.maps.DirectionsTravelMode.TRANSIT;
     }

     var request = {
         origin: start,
         destination: end,
         travelMode: travelMode
     };
     directionsService.route(request, function(response, status) {
       if (status == google.maps.DirectionsStatus.OK) {
         polyline.setPath([]);
         var bounds = new google.maps.LatLngBounds();
         startLocation = new Object();
         endLocation = new Object();
         directionsDisplay.setDirections(response);
         var route = response.routes[0];

         // For each route, display summary information.
     var path = response.routes[0].overview_path;
     var legs = response.routes[0].legs;
         for (i=0;i<legs.length;i++) {
           if (i == 0) { 
             startLocation.latlng = legs[i].start_location;
             startLocation.address = legs[i].start_address;
           }
           endLocation.latlng = legs[i].end_location;
           endLocation.address = legs[i].end_address;
           var steps = legs[i].steps;
           for (j=0;j<steps.length;j++) {
             var nextSegment = steps[j].path;
             for (k=0;k<nextSegment.length;k++) {
               polyline.getPath().push(nextSegment[k]);
               bounds.extend(nextSegment[k]);
             }
           }
         }

         polyline.setMap(map);

         computeTotalDistance(response);
       } else {
         alert("directions response "+status);
       }
     });
   }

 	var totalDist = 0;
       function computeTotalDistance(result) {
    	   totalDist = 0;
       		var myroute = result.routes[0];
       		for (i = 0; i < myroute.legs.length; i++) {
         		totalDist += myroute.legs[i].distance.value;      
       		}
       		putMarkerOnRoute(50);

       		totalDist = totalDist / 1000.
       }

       function putMarkerOnRoute(percentage) {
         var distance = (percentage/100) * totalDist;
 
         JSONresult.middleWay = polyline.GetPointAtDistance(distance);
         var request = {
             location: polyline.GetPointAtDistance(distance),
             types: [typeOfPlaces],
             openNow: openNow
           };
         if (rankBy == 'DISTANCE') { request.rankBy = google.maps.places.RankBy.DISTANCE; }
         else { request.radius = radius; }
         
         var service = new google.maps.places.PlacesService(map);
         service.nearbySearch(request, callback);

         function callback(results, status, pagination) {
           JSONresult.placesAround = results;
           document.body.innerHTML = htmlEntities(JSON.stringify(JSONresult,undefined,'\t'));
         }      
       }
       document.body.innerHTML = ':)';
       //initialize();
 </script>
 </head>
 <body onload="initialize()">
 <div id="map_canvas"></div>
 </body>
 </html>
