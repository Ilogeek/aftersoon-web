
<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="initial-scale=1.0, user-scalable=no"/>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"/>
<title>Aftersoon</title>
<style type="text/css">
html { height: 100% }
body { height: 100%; margin: 0px; padding: 0px }
</style>
<script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false&libraries=places"></script>
<script type ="text/javascript" src="http://geocodezip.com/scripts/v3_epoly.js"></script>
<script type="text/javascript">

var JSONresult = {};

// GET URL PARAMETERS
    function gup( name )
    {
      name = name.replace(/[\[]/,"\\\[").replace(/[\]]/,"\\\]");
      var regexS = "[\\?&]"+name+"=([^&#]*)";
      var regex = new RegExp( regexS );
      var results = regex.exec( window.location.href );
      if( results == null )
        return null;
      else
        return results[1];
    }
// END GET URL PARAMETERS

var firstAddress = gup('firstAddress');
var secondAddress = gup('secondAddress');
var travelModeParam = gup('travelModeParam');
var typeOfPlaces = gup('typeOfPlaces'); // https://developers.google.com/places/documentation/supported_types
var radius = gup('radius');
if (!radius) {radius = 200;}

  var directionDisplay;
  var directionsService = new google.maps.DirectionsService();
  var map;
  var polyline = null;
  var infowindow = new google.maps.InfoWindow();

function createMarker(latlng, label, html) {
// alert("createMarker("+latlng+","+label+","+html+","+color+")");
    var contentString = '<b>'+label+'</b><br>'+html;
    var marker = new google.maps.Marker({
        position: latlng,
        map: map,
        title: label,
        zIndex: Math.round(latlng.lat()*-100000)<<5
        });
        marker.myname = label;
        // gmarkers.push(marker);

    google.maps.event.addListener(marker, 'click', function() {
        infowindow.setContent(contentString+"<br>"+marker.getPosition().toUrlValue(6)); 
        infowindow.open(map,marker);
        });
    return marker;
}

  function initialize() {
    directionsDisplay = new google.maps.DirectionsRenderer({suppressMarkers:true});
    var chicago = new google.maps.LatLng(41.850033, -87.6500523);
    var myOptions = {
      zoom: 6,
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      center: chicago
    }
    map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);
    polyline = new google.maps.Polyline({
    path: [],
    strokeColor: '#FF0000',
    strokeWeight: 3
    });
    directionsDisplay.setMap(map);
    calcRoute();
  }
  
  function calcRoute() {
    var CoordFirstAddress = firstAddress.split(",%20");
    var CoordSecondAddress = secondAddress.split(",%20");
    
    JSONresult.firstCoordinates = new google.maps.LatLng(parseFloat(CoordFirstAddress[0]),parseFloat(CoordFirstAddress[1]));
    JSONresult.secondCoordinates = new google.maps.LatLng(parseFloat(CoordSecondAddress[0]),parseFloat(CoordSecondAddress[1]));

    var start = JSONresult.firstCoordinates;
    var end = JSONresult.secondCoordinates;

    
    var travelMode = google.maps.DirectionsTravelMode.DRIVING;
    if (travelModeParam == "WALKING") {
        travelMode = google.maps.DirectionsTravelMode.WALKING;
    }
    if(travelModeParam == "TRANSIT") {
        travelMode = google.maps.DirectionsTravelMode.TRANSIT;
    }
    console.log(travelMode);

    var request = {
        origin: start,
        destination: end,
        travelMode: travelMode
    };
    directionsService.route(request, function(response, status) {
      if (status == google.maps.DirectionsStatus.OK) {
        polyline.setPath([]);
        var bounds = new google.maps.LatLngBounds();
        startLocation = new Object();
        endLocation = new Object();
        directionsDisplay.setDirections(response);
        var route = response.routes[0];
        var summaryPanel = document.getElementById("directions_panel");
        summaryPanel.innerHTML = "";

        // For each route, display summary information.
    var path = response.routes[0].overview_path;
    var legs = response.routes[0].legs;
        for (i=0;i<legs.length;i++) {
          if (i == 0) { 
            startLocation.latlng = legs[i].start_location;
            startLocation.address = legs[i].start_address;
            // marker = google.maps.Marker({map:map,position: startLocation.latlng});
            marker = createMarker(legs[i].start_location,"midpoint","","green");
          }
          endLocation.latlng = legs[i].end_location;
          endLocation.address = legs[i].end_address;
          var steps = legs[i].steps;
          for (j=0;j<steps.length;j++) {
            var nextSegment = steps[j].path;
            for (k=0;k<nextSegment.length;k++) {
              polyline.getPath().push(nextSegment[k]);
              bounds.extend(nextSegment[k]);
            }
          }
        }

        polyline.setMap(map);

        computeTotalDistance(response);
      } else {
        alert("directions response "+status);
      }
    });
  }

var totalDist = 0;
var totalTime = 0;
      function computeTotalDistance(result) {
      totalDist = 0;
      totalTime = 0;
      var myroute = result.routes[0];
      for (i = 0; i < myroute.legs.length; i++) {
        totalDist += myroute.legs[i].distance.value;
        totalTime += myroute.legs[i].duration.value;      
      }
      putMarkerOnRoute(50);

      totalDist = totalDist / 1000.
      document.getElementById("total").innerHTML = "total distance : "+ totalDist + " km<br>total time : " + (totalTime / 60).toFixed(2) + " minutes";
//      document.getElementById("totalTime").value = (totalTime/60.).toFixed(2);
      }

      function putMarkerOnRoute(percentage) {
        var distance = (percentage/100) * totalDist;
        var time = ((percentage/100) * totalTime/60).toFixed(2);
        // alert("Time:"+time+" totalTime:"+totalTime+" totalDist:"+totalDist+" dist:"+distance);
    if (!marker) {
          marker = createMarker(polyline.GetPointAtDistance(distance),"time: "+time,"marker");
    } else {
          marker.setPosition(polyline.GetPointAtDistance(distance));
          marker.setTitle("time:"+time);
        }
        JSONresult.middleWay = polyline.GetPointAtDistance(distance);
        var request = {
            location: polyline.GetPointAtDistance(distance),
            radius: radius,
            types: [typeOfPlaces]
          };
        var service = new google.maps.places.PlacesService(map);
        service.nearbySearch(request, callback);

        function callback(results, status, pagination) {
          if (status != google.maps.places.PlacesServiceStatus.OK) {
            JSONresult.placesAround = results;
            console.log(JSON.stringify(JSONresult));
            return;
          } else {
            JSONresult.placesAround = results;
            console.log(JSON.stringify(JSONresult));
            createMarkers(results);
          }
        }

        function createMarkers(places) {
          var bounds = new google.maps.LatLngBounds();

          for (var i = 0, place; place = places[i]; i++) {
            var image = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            var marker = new google.maps.Marker({
              map: map,
              icon: image,
              title: place.name,
              position: place.geometry.location
            });

            //placesList.innerHTML += '<li>' + place.name + '</li>';

            bounds.extend(place.geometry.location);
          }
          map.fitBounds(bounds);
        }
      }
</script>
</head>
<body onload="initialize()">
<div id="map_canvas" style="float:left;width:70%;height:100%;"></div>
<div id="control_panel" style="float:right;width:30%;text-align:left;padding-top:20px">
<div id="directions_panel" style="margin:20px;background-color:#FFEE77;"></div>
<div id="total"></div>
</div>
</body>
</html>
